/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

vertices
(
    (-0.5 -1.0 -0.5)
    (0.5 -1.0 -0.5)
    (0.5 0.0 -0.5)
    (-0.5 0.0 -0.5)

    (-0.5 -1.0 0.5)
    (0.5 -1.0 0.5)
    (0.5 0.0 0.5)
    (-0.5 0.0 0.5)

    (-0.5 0.0 -0.5)
    (0.5 0.0 -0.5)
    (0.5 2.0 -0.5)
    (-0.5 2.0 -0.5)

    (-0.5 0.0 0.5)
    (0.5 0.0 0.5)
    (0.5 2.0 0.5)
    (-0.5 2.0 0.5)
);

blocks          
(
    hex (0 1 2 3 4 5 6 7) (20 10 1) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) (20 20 1) simpleGrading (1 1 1)
    //hex (8 9 10 11 12 13 14 15) (10 20 1) simpleGrading (1 1 1)
    //hex (0 1 2 3 4 5 6 7) (120 480 1) simpleGrading (1 1 1)
);

edges           
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (1 5 4 0)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            //(3  7  6  2)
            (11 15 14 10)
        );
    }
    frontAndBack 
    {
        type empty;
        faces
        (
            (4 5 6 7)
            (0 3 2 1)
            (12 13 14 15)
            (8 11 10 9)
        );
    }
    currentCollector
    {
        type patch;
        faces
        (
            //(0 4 7 3)
            (8 12 15 11)
        );
    }
    separator
    {
        type patch;
        faces
        (
            //(2 6 5 1)
            (10 14 13 9)
        );
    }
    wall 
    {
        type patch;
        faces
        (
            (0 4 7 3)
            (2 6 5 1)
        );
    }
    interface1 
    {
        type patch;
        faces
        (
            (3 7 6 2)
        );
    }
    interface2
    {
        type patch;
        faces
        (
            (9 13 12 8)
        );
    }
);

mergePatchPairs 
(
    (interface1 interface2)
);

// ************************************************************************* //
